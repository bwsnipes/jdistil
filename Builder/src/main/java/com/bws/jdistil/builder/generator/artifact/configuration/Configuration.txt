package BASE_PACKAGE_NAME.configuration;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.bws.jdistil.core.configuration.Action;
import com.bws.jdistil.core.configuration.ConfigurationManager;
import com.bws.jdistil.core.configuration.Field;
import com.bws.jdistil.core.configuration.Page;
import com.bws.jdistil.core.configuration.ObjectBinding;
import com.bws.jdistil.core.factory.IFactoryProvider;
import BASE_PACKAGE_NAME.ViewHome;
import BASE_PACKAGE_NAME.configuration.fragments.*;

/**
 * Defines the application configuration.
 */
public class Configuration extends com.bws.jdistil.core.configuration.Configuration {

  private List<com.bws.jdistil.core.configuration.Configuration> fragmentConfigurations = 
        new ArrayList<com.bws.jdistil.core.configuration.Configuration>();
  
  /**
    Creates a new Configuration object.
  */
  public Configuration() {
    super();
    
    FRAGMENT-CONFIGURATION-STATEMENTS
  }

  /**
   * Registers factory providers used by an application by package or class name.
   * @param factoryProviders - Set of factory providers keyed by package or class name.
   */
  @Override
  public void registerFactoryProviders(Map<String, Class<? extends IFactoryProvider>> factoryProviders) {
    
    super.registerFactoryProviders(factoryProviders);
    
    for (com.bws.jdistil.core.configuration.Configuration configuration : fragmentConfigurations) {
      configuration.registerFactoryProviders(factoryProviders);
    }
  }

  /**
   * Register fields.
   * @see com.bws.jdistil.core.FlakeConfiguration.Configuration#registerFields(Set)
   */
  @Override
  public void registerFields(Set<Field> fields) {
    
    super.registerFields(fields);
  
    for (com.bws.jdistil.core.configuration.Configuration configuration : fragmentConfigurations) {
      configuration.registerFields(fields);
    }
  }

  /**
   * Registers actions used by an application.
   * @param actions - Set of actions to be populated.
   */
  @Override
  public void registerActions(Set<Action> actions) {
  
    super.registerActions(actions);
  
    Action viewHome = new Action(ActionIds.VIEW_HOME, "View");
    viewHome.addProcessorFactory(ConfigurationManager.getFactory(ViewHome.class));
    actions.add(viewHome);
  
    for (com.bws.jdistil.core.configuration.Configuration configuration : fragmentConfigurations) {
      configuration.registerActions(actions);
    }
  }

  /**
   * Registers pages used by an application.
   * @param pages - Set of pages to be populated.
   */
  @Override
  public void registerPages(Set<Page> pages) {

    super.registerPages(pages);

    Page home = new Page(PageIds.HOME, "/Home.jsp", "Home", true);    
    pages.add(home);
  
    for (com.bws.jdistil.core.configuration.Configuration configuration : fragmentConfigurations) {
      configuration.registerPages(pages);
    }
  }
    
  /**
   * Registers object bindings used by an application.
   * @param objectBindings - Set of object bindings to be populated.
   */
  @Override
  public void registerObjectBindings(Set<ObjectBinding> objectBindings) {
    
    super.registerObjectBindings(objectBindings);
  
    for (com.bws.jdistil.core.configuration.Configuration configuration : fragmentConfigurations) {
      configuration.registerObjectBindings(objectBindings);
    }
  }
  
}
